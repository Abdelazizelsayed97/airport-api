# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type AirLine {
  country: String!
  id: String!
  name: String!
}

input AssignToFlightDto {
  employeeId: String!
  flightId: String!
}

type Book {
  flightNumber: String!
  id: String!
  seatNumber: String!
  user: User!
}

input CreateAirLineInput {
  country: String!
  name: String!
}

input CreateBookInput {
  flightNumber: String!
  role: UsersRoles!
  seatNumber: String!
  userId: String!
}

input CreateFightStaffInput {
  employeeID: String!
  fight_id: String!
  name: String!
  role: staff_Roles!
}

input CreateFlightMangementInput {
  airline: String!
  arrival_time: Timestamp!
  assignedStaff: CreateFightStaffInput
  available_seats: Float!
  departure_airport: String!
  departure_time: Timestamp!
  destination_airport: String!
  flight_number: String!
  flight_status: flight_status
}

type Employee {
  assigned_flights: [FlightStaff!]!
  email: String!

  """Example field (placeholder)"""
  id: String!
  name: String!
  role: staff_Roles!
  users: User!
}

type FlightEntity {
  airline: String!
  arrival_time: Timestamp!
  assigned: FlightStaff
  available_seats: Int!
  departure_airport: String!
  departure_time: Timestamp!
  destination_airport: String!
  flight_number: String!
  flight_status: flight_status!
  id: String!
  passagngers: [User!]
  takenSeats: Int
}

type FlightStaff {
  employeeID: String!
  flight: FlightEntity
  id: String!
  name: String!
}

input FlightsFilterInput {
  airLine: String!
  name: String!
  passport_number: String!
}

type Mutation {
  assignEmployee(assignToFlightInput: AssignToFlightDto!): Employee!
  createAirLine(createAirLineInput: CreateAirLineInput!): AirLine!
  createBook(createBookInput: CreateBookInput!): Book!
  createFightStaff(createFightStaffInput: CreateFightStaffInput!): FlightStaff!
  createFlight(createFlightMangementInput: CreateFlightMangementInput!): FlightEntity!
  deleteUser(id: String!): User!
  login(loginInput: SignInDto!): User!
  register(registerInput: RegisterInput!): User!
  removeAirLine(id: String!): AirLine!
  removeBook(id: String!): Book!
  removeEmployee(id: String!): Employee!
  removeFightStaff(id: Int!): FlightStaff!
  removeFlightMangement(id: String!): FlightEntity!
  updateAirLine(updateAirLineInput: UpdateAirLineInput!): AirLine!
  updateBook(updateBookInput: UpdateBookInput!): Book!
  updateEmployee(updateEmployeeInput: UpdateEmployeeInput!): Employee!
  updateFightStaff(updateFightStaffInput: UpdateFightStaffInput!): FlightStaff!
  updateFlightMangement(updateFlightMangementInput: UpdateFlightMangementInput!): FlightEntity!
  updateUser(updateUserInput: UpdateUserInput!): User!
}

input PaginationInput {
  limit: Int! = 20
  page: Int = 1
}

type Permission {
  description: String!
  id: String!
  permission: String!
  roles: [Role!]!
}

type Query {
  airLine(id: String!): AirLine!
  airLines(paginationInput: PaginationInput!): [AirLine!]!
  book(id: String!): Book!
  employee(id: String!): Employee!
  employees: [Employee!]!
  fightStaff(id: Int!): FlightStaff!
  flightMangementById(id: String!): FlightEntity!
  getAllFlights(filter: FlightsFilterInput, pagination: PaginationInput): [FlightEntity!]
  getUserById(id: String!): User!
  me: User!
  users(paginate: PaginationInput!): [User!]!
}

input RegisterInput {
  email: String!
  name: String!
  passportNumber: String!
  password: String!
  role: UsersRoles!
}

type Role {
  id: String!
  name: String!
  permissions: [Permission!]
}

input SignInDto {
  email: String!
  password: String!
}

"""
`Date` type as integer. Type represents date and time as number of milliseconds from start of UNIX epoch.
"""
scalar Timestamp

input UpdateAirLineInput {
  country: String
  id: String!
  name: String
}

input UpdateBookInput {
  flightNumber: String
  id: String!
  role: UsersRoles
  seatNumber: String
  userId: String
}

input UpdateEmployeeInput {
  email: String
  id: String!
  name: String
  role: staff_Roles
}

input UpdateFightStaffInput {
  employeeID: String
  fight_id: String
  id: String!
  name: String
  role: staff_Roles
}

input UpdateFlightMangementInput {
  airline: String
  arrival_time: Timestamp
  assignedStaff: CreateFightStaffInput
  available_seats: Float
  departure_airport: String
  departure_time: Timestamp
  destination_airport: String
  flight_number: String
  flight_status: flight_status
  id: Int!
}

input UpdateUserInput {
  email: String
  id: String!
  name: String
  passportNumber: String
  password: String
  role: UsersRoles
}

type User {
  bookingList: [Book!]
  email: String!
  id: String!
  name: String!
  password: String!
  role: UsersRoles!
  token: String!
}

enum UsersRoles {
  admin
  staff
  super_admin
  user
}

"""The status of the flight"""
enum flight_status {
  canceled
  delayed
  on_time
}

enum staff_Roles {
  crew
  pilot
  security
}